{"version":3,"sources":["components/title/TitleForm.tsx","redux/actions.ts","components/error/ErrorSnackbar.tsx","components/info/InfoBlock.tsx","components/data/DataBlock.tsx","components/city/CityBlock.tsx","pages/weather/WeatherContainer.tsx","components/city/SelectedCity.tsx","api/instance.ts","api/WeatherAPI.tsx","components/city/SelectedContainer.tsx","redux/thunk.ts","App.tsx","reportWebVitals.ts","redux/initialState.ts","redux/redux-store.ts","redux/weather-reducer.ts","index.tsx","pages/weather/weather.module.css"],"names":["TitleForm","className","style","titleForm","setErrorAC","err","type","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","dispatch","useDispatch","handleClose","event","reason","Snackbar","open","error","autoHideDuration","onClose","severity","sx","width","InfoBlock","speed","humidity","description","color","DataBlock","useState","Date","data","setData","nullClock","num","useEffect","intervalClock","setTimeout","clearInterval","time","getHours","getMinutes","getSeconds","CityBlock","cityName","country","icon","cityBox","src","WeatherContainer","weatherTemp","weathers","useSelector","state","weather","Math","ceil","main","temp","weatherContainer","infoBlock","name","sys","wind","SelectedCity","title","setTitle","selectedContainer","Box","component","m","noValidate","autoComplete","TextField","value","id","label","onChange","e","currentTarget","onKeyPress","key","callBack","Button","onClick","instance","axios","create","baseURL","weatherAPI","city","get","SelectedContainer","trim","a","res","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c53f9cea.chunk.js","sourcesContent":["import React from 'react';\nimport style from '../../pages/weather/weather.module.css'\n\nexport const TitleForm = () => {\n    return (\n        <div className={style.titleForm}>\n            <h3>Прогноз погды </h3>\n        </div>\n    );\n};\n","import {WeatherDataType} from \"../api/WeatherAPI\";\n\nexport const setWeatherAC = (weather: WeatherDataType) => ({type: 'SET-WEATHER', weather} as const)\nexport const setErrorAC = (err: string | null) => ({type: 'SET-ERROR', err} as const)\n\n\n//Type\ntype SetErrorACACType = ReturnType<typeof setErrorAC>\ntype SetWeatherACType = ReturnType<typeof setWeatherAC>\nexport type WeatherActionType = SetWeatherACType | SetErrorACACType","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useDispatch} from \"react-redux\";\nimport {setErrorAC} from \"../../redux/actions\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\ntype ErrorSnackbarType = {\n    error: string | null\n}\n\nexport function ErrorSnackbar(props: ErrorSnackbarType) {\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setErrorAC(null))\n    };\n\n    return (\n        <Snackbar open={props.error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {props.error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import React from 'react';\n\ntype InfoBlockType = {\n    speed: number,\n    humidity: number,\n    description: string,\n}\n\nexport const InfoBlock: React.FC<InfoBlockType> = ({speed, humidity, description}) => {\n    return (\n\n        <div style={{color: 'grey'}}>\n            <div>{description}</div>\n            <div>Влажность: {humidity}%</div>\n            <div>Ветер: {speed}км/час</div>\n        </div>\n    );\n};\n","import React, {useEffect, useState} from 'react';\nimport style from '../../pages/weather/weather.module.css'\n\nexport const DataBlock = () => {\n    const [data, setData] = useState(new Date())\n\n    const nullClock = (num: number) => num < 10 ? '0' + num : num;\n    useEffect(() => {\n        const intervalClock = setTimeout(() => {\n            setData(new Date)\n        }, 1000)\n        return () => {\n            clearInterval(intervalClock)\n        }\n    })\n    return (\n        <div className={style.time}>\n            <div>\n                <span>{nullClock(data.getHours())}</span>:\n                <span>{nullClock(data.getMinutes())}</span>:\n                <span>{nullClock(data.getSeconds())}</span>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport style from \"../../pages/weather/weather.module.css\";\nimport {DataBlock} from \"../data/DataBlock\";\n\ntype CityBlockType = {\n    cityName: string,\n    country: string,\n    icon: string,\n}\n\nexport const CityBlock: React.FC<CityBlockType> = ({cityName, country, icon}) => {\n\n    return (\n        <div className={style.cityBox}>\n            <span>{cityName || ''}, {country || ''}</span>\n            <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\n            <DataBlock/>\n        </div>\n    );\n};","import React from 'react';\nimport style from './weather.module.css'\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport {ErrorSnackbar} from \"../../components/error/ErrorSnackbar\";\nimport {InfoBlock} from \"../../components/info/InfoBlock\";\nimport {CityBlock} from \"../../components/city/CityBlock\";\nimport {WeatherDataType} from \"../../api/WeatherAPI\";\n\nexport const WeatherContainer = () => {\n    const weathers = useSelector<AppRootStateType, WeatherDataType>(state => state.weather.weather)\n    const error = useSelector<AppRootStateType, string | null>(state => state.weather.error)\n\n    let weatherTemp\n    if (weathers) {\n        weatherTemp = Math.ceil(weathers.main.temp)\n    }\n\n    return (\n        <div className={style.weatherContainer}>\n            {weathers &&\n                <div className={style.infoBlock}>\n                    <CityBlock cityName={weathers.name} country={weathers.sys.country}\n                               icon={weathers.weather[0].icon}/>\n                    <div className={style.temp}>{weatherTemp}°C</div>\n                    <InfoBlock speed={weathers.wind.speed} humidity={weathers.main.humidity}\n                               description={weathers.weather[0].description}/>\n                </div>\n            }\n            <ErrorSnackbar error={error}/>\n        </div>\n    );\n};\n","import React, {KeyboardEvent, useState} from 'react';\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport {Button} from \"@mui/material\";\nimport style from \"../../pages/weather/weather.module.css\";\n\ntype SelectedCityType = {\n    callBack: (title: string) => void\n}\n\nexport const SelectedCity = (props: SelectedCityType) => {\n    const [title, setTitle] = useState<string>('')\n\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const clickHandler = () => {\n        props.callBack(title)\n        setTitle('')\n    }\n\n    const keyPress = (e: KeyboardEvent<HTMLDivElement>) => {\n        if(e.key === 'Enter'){\n            props.callBack(title)\n        }\n    }\n\n    return (\n        <div className={style.selectedContainer}>\n            <div>\n                <Box\n                    component=\"form\"\n                    sx={{\n                        '& > :not(style)': {m: 1, width: '25ch'},\n                    }}\n                    noValidate\n                    autoComplete=\"off\"\n                >\n                    <TextField value={title} id=\"outlined-basic\" label=\"Поиск города..\" variant=\"outlined\"\n                               onChange={changeHandler} onKeyPress={keyPress}/>\n                </Box>\n            </div>\n            <div>\n                <Button variant=\"outlined\" onClick={clickHandler} style={{width: '10ch'}}>Найти</Button>\n            </div>\n        </div>\n    );\n};\n","import axios from \"axios\";\n\nexport const instance = axios.create({\n    baseURL: 'https://api.openweathermap.org/data/2.5/',\n    // headers: {\n    //     'API_KEY': '2e9ba06124d139023be9419f3f53805d'\n    // }\n})\n","import {AxiosResponse} from \"axios\";\nimport {instance} from \"./instance\";\n\n//api\nexport const weatherAPI = {\n    getWeather(city: string) {\n        return instance.get<{}, AxiosResponse<WeatherDataType>>(`weather?q=${city}&lang=ru&units=metric&appid=2e9ba06124d139023be9419f3f53805d`)\n    }\n}\n\nexport type WeatherDataType = {\n    weather: [\n        {\n            description: string,\n            icon: string\n        }\n    ],\n    main: {\n        temp: number,\n        humidity: number,\n    },\n    wind: {\n        speed: number,\n        deg: number\n    },\n    sys: {\n        country: string,\n    },\n    name: string,\n\n}","import React from 'react';\nimport {SelectedCity} from \"./SelectedCity\";\nimport {useDispatch} from \"react-redux\";\nimport {getWeatherTC} from \"../../redux/thunk\";\nimport {setErrorAC} from \"../../redux/actions\";\n\nexport const SelectedContainer = () => {\n    const dispatch = useDispatch()\n\n    const clickHandler = (title: string) => {\n        if (title.trim() === '') {\n            dispatch(setErrorAC('Please, enter a city name!'))\n        } else {\n            dispatch(getWeatherTC(title))\n        }\n    }\n    return (\n        <div>\n            <SelectedCity callBack={clickHandler}/>\n        </div>\n    );\n};\n","import {AppThunk} from \"./redux-store\";\nimport {weatherAPI} from \"../api/WeatherAPI\";\nimport {setErrorAC, setWeatherAC} from \"./actions\";\n\nexport const getWeatherTC = (city: string): AppThunk => async dispatch => {\n    try {\n        const res = await weatherAPI.getWeather(city)\n        dispatch(setWeatherAC(res.data))\n    } catch (err) {\n        dispatch(setErrorAC('No results were found for this query, please enter a valid city name!'))\n    }\n}","import React from 'react';\nimport './App.css';\nimport {TitleForm} from \"./components/title/TitleForm\";\nimport {WeatherContainer} from \"./pages/weather/WeatherContainer\";\nimport {SelectedContainer} from \"./components/city/SelectedContainer\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TitleForm/>\n            <SelectedContainer/>\n            <WeatherContainer/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {WeatherDataType} from \"../api/WeatherAPI\";\n\nexport type InitialStateType = {\n    weather: WeatherDataType,\n    error: string | null,\n}\n\nexport const initialState: InitialStateType = {\n    error: null\n} as InitialStateType","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport { weatherReducer} from \"./weather-reducer\";\nimport thunk, {ThunkAction} from \"redux-thunk\";\nimport {WeatherActionType} from \"./actions\";\n\nconst rootReducer = combineReducers({\n    weather: weatherReducer,\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\nexport  type ActionType = WeatherActionType\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, ActionType>\n\n//@ts-ignore\nwindow.store = store","import {initialState, InitialStateType} from \"./initialState\";\nimport {WeatherActionType} from \"./actions\";\n\n\nexport const weatherReducer = (state = initialState, action: WeatherActionType): InitialStateType => {\n    switch (action.type) {\n        case \"SET-ERROR\":\n            return {...state, error: action.err}\n        case \"SET-WEATHER\":\n            return {...state, weather: action.weather}\n        default:\n            return state\n    }\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherContainer\":\"weather_weatherContainer__ftfgr\",\"selectedContainer\":\"weather_selectedContainer__3VVGS\",\"titleForm\":\"weather_titleForm__2mcdT\",\"infoBlock\":\"weather_infoBlock__32D5D\",\"cityBox\":\"weather_cityBox__1tUE-\",\"temp\":\"weather_temp__16lGd\",\"time\":\"weather_time__3ogQr\"};"],"sourceRoot":""}